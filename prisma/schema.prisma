generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

type MessageDataChannelAndMessageIds {
  channelId String
  messageId String
}

type MessageDataReference {
  channelId String
  guildId   String?
  messageId String?
}

type NetworkWebhook {
  id    String
  token String
  url   String
}

type UserDataWarnings {
  automated   Boolean
  moderatorId String?
  id          String
  reason      String
  timestamp   DateTime
}

type HubRating {
  userId String
  rating Int    @default(0)
}

type HubModerator {
  userId   String
  position String @default("network_mod") // network, manager 
  // network -> just basic actions like warning/muting
  // manager -> perm blacklisting, managing hub etc.
  // honestly... I might as well make permissions lol
}

model blacklistedServers {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  serverId   String
  serverName String
  expires    DateTime?
  reason     String
  hub        hubs      @relation(fields: [hubId], references: [id])
  hubId      String    @db.ObjectId
}

model blacklistedUsers {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String    @unique
  notified Boolean
  reason   String
  expires  DateTime?
  username String
  hub      hubs      @relation(fields: [hubId], references: [id])
  hubId    String    @db.ObjectId
}

model connectedList {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  channelId  String          @unique
  serverId   String
  connected  Boolean
  compact    Boolean
  invite     String?
  profFilter Boolean
  webhook    NetworkWebhook
  date       DateTime        @default(now())
  hub        hubs?           @relation(fields: [hubId], references: [id])
  hubId      String?         @db.ObjectId
}

model hubs {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String               @unique
  description        String
  tags               String[]
  rating             HubRating[]
  ownerId            String
  iconUrl            String
  bannerUrl          String?
  private            Boolean              @default(true)
  createdAt          DateTime             @default(now())
  // all the stuff below is relations to other collections
  invites            hubInvites[]
  messages           messageData[]
  moderators         HubModerator[]
  connections        connectedList[]
  blacklistedUsers   blacklistedUsers[]
  blacklistedServers blacklistedServers[]
  // approved           Boolean              @default(false)
  // official           Boolean              @default(false)
}

model hubInvites {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  code    String   @unique @default(nanoid(10))
  expires DateTime
  hub     hubs     @relation(fields: [hubId], references: [id])
  hubId   String   @db.ObjectId
}

model messageData {
  id                   String                            @id @default(auto()) @map("_id") @db.ObjectId
  authorId             String
  channelAndMessageIds MessageDataChannelAndMessageIds[]
  reference            MessageDataReference?
  serverId             String
  timestamp            DateTime
  hub                  hubs?                             @relation(fields: [hubId], references: [id])
  hubId                String?                           @db.ObjectId
}

model userBadges {
  userId String   @id @map("_id")
  badges String[]
}

model userWarns {
  id       String             @id @default(auto()) @map("_id") @db.ObjectId
  userId   String             @unique
  userTag  String
  warnings UserDataWarnings[]
}
