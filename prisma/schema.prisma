generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

type MessageDataChannelAndMessageIds {
  channelId String
  messageId String
}

type MessageDataReference {
  channelId String
  guildId   String?
  messageId String?
}

type SetupWebhook {
  id    String
  token String
  url   String
}

type UserDataWarnings {
  automated   Boolean
  moderatorId String?
  id          String
  reason      String
  timestamp   DateTime
}

model blacklistedServers {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  serverId   String    @unique
  serverName String
  expires    DateTime?
  reason     String
}

model blacklistedUsers {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String    @unique
  notified Boolean
  reason   String
  expires  DateTime?
  username String
}

model connectedList {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  channelId String @unique
  serverId  String
}

// model levels {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   //  v           Int      @map("__v")
//   guildID     String
//   lastUpdated DateTime @db.Date
//   level       Int
//   userID      String
//   xp          Int
// }

model messageData {
  id                   String                            @id @default(auto()) @map("_id") @db.ObjectId
  authorId             String
  channelAndMessageIds MessageDataChannelAndMessageIds[]
  expired              Boolean
  reference            MessageDataReference?
  serverId             String
  timestamp            Float
}

model restrictedWords {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  words String[]
}

model setup {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  channelId  String        @unique
  compact    Boolean
  date       DateTime      @default(now())
  guildId    String
  profFilter Boolean
  invite     String?       @unique
  webhook    SetupWebhook?
}

model userBadges {
  userId String   @id @map("_id")
  badges String[]
}

model userWarns {
  id       String             @id @default(auto()) @map("_id") @db.ObjectId
  userId   String             @unique
  userTag  String
  warnings UserDataWarnings[]
}

model Levels {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  xp     Int
  level  Int
}
