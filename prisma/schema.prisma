generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums moved to top for better organization
enum Role {
  MODERATOR
  MANAGER
}

enum InfractionType {
  BLACKLIST
  WARNING
}

enum InfractionStatus {
  ACTIVE
  REVOKED
  APPEALED
}

enum BlockWordAction {
  BLOCK_MESSAGE
  BLACKLIST
  SEND_ALERT
}

type LogChannel {
  channelId String
  roleId    String?
}

type RecentLobbyData {
  lobbyId   String
  timestamp Int
}

// Models
model Hub {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String
  owner               UserData       @relation(fields: [ownerId], references: [id])
  ownerId             String         @db.String
  iconUrl             String
  bannerUrl           String?
  private             Boolean        @default(true)
  locked              Boolean        @default(false)
  appealCooldownHours Int            @default(168)
  settings            Int
  moderators          HubModerator[]
  connections         Connection[]
  logConfig           HubLogConfig?
  blockWords          BlockWord[]
  infractions         Infraction[] // Combined user and server infractions
  invites             HubInvite[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@unique([name])
  @@index([ownerId])
}

model HubModerator {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  hubId  String   @db.ObjectId
  userId String   @db.String
  role   Role
  hub    Hub      @relation(fields: [hubId], references: [id])
  user   UserData @relation(fields: [userId], references: [id])

  @@unique([hubId, userId])
}

model Connection {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId  String   @unique
  parentId   String? // Parent channel ID for threads
  serverId   String
  hubId      String   @db.ObjectId
  connected  Boolean  @default(true)
  compact    Boolean  @default(false)
  invite     String?
  profFilter Boolean  @default(false)
  createdAt  DateTime @default(now())
  embedColor String?
  webhookURL String
  lastActive DateTime @default(now())
  hub        Hub      @relation(fields: [hubId], references: [id])

  @@unique([channelId, serverId])
  @@index([hubId, channelId])
}

model Infraction {
  id          String           @id @default(nanoid(10)) @map("_id")
  hubId       String           @db.ObjectId
  type        InfractionType   @default(BLACKLIST)
  status      InfractionStatus @default(ACTIVE)
  moderatorId String
  reason      String
  expiresAt   DateTime?
  appealedAt  DateTime?
  appealedBy  String? // User ID

  // For user infractions
  userId String?   @db.String
  user   UserData? @relation(fields: [userId], references: [id])

  // For server infractions
  serverId   String?
  serverName String?

  hub       Hub      @relation(fields: [hubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, hubId])
}

model BlockWord {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  hubId     String            @db.ObjectId
  name      String
  words     String // words separated by comma
  createdBy String
  actions   BlockWordAction[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  hub Hub @relation(fields: [hubId], references: [id])

  @@index([hubId])
  @@index([words])
}

model HubLogConfig {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  hubId         String      @unique @db.ObjectId
  modLogs       LogChannel?
  joinLeaves    LogChannel?
  profanity     LogChannel?
  appeals       LogChannel?
  reports       LogChannel?
  networkAlerts LogChannel?
  hub           Hub         @relation(fields: [hubId], references: [id])
}

model HubInvite {
  code    String   @id @default(nanoid(10)) @map("_id")
  hubId   String   @db.ObjectId
  expires DateTime
  hub     Hub      @relation(fields: [hubId], references: [id])

  @@index([hubId])
}

model UserData {
  id             String         @id @map("_id") @db.String
  username       String?
  locale         String?
  voteCount      Int            @default(0)
  lastVoted      DateTime?
  banReason      String?
  mentionOnReply Boolean        @default(true)
  acceptedRules  Boolean        @default(false)
  infractions    Infraction[]
  modPositions   HubModerator[]
  updatedAt      DateTime       @updatedAt
  xp             Int            @default(0)
  level          Int            @default(0)
  messageCount   Int            @default(0)
  lastMessageAt  DateTime       @default(now())
  ownedHubs      Hub[]

  @@index([xp])
  @@index([level])
  @@index([messageCount])
}

model ServerData {
  id            String   @id @map("_id") @db.String
  premiumStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  messageCount  Int      @default(0)
  lastMessageAt DateTime @default(now())
}
